#!/usr/bin/env bash
set -euo pipefail

# Build CSR static files for Electron integration
# This script builds the client bundle and packages it into dist/client/

echo "🏗️  Building CSR client bundle..."
# For CSR builds, temporarily disable the wrapper index.tsx and use index.csr.tsx directly
# This prevents SolidStart from including both CSR and SSR versions in the bundle
if [ -f "src/routes/index.tsx" ]; then
  mv src/routes/index.tsx src/routes/index.tsx.disabled
fi
if [ -f "src/routes/index.csr.tsx" ]; then
  cp src/routes/index.csr.tsx src/routes/index.tsx
fi

# Build with SolidStart (client files will be generated even if prerendering fails)
env WEBUI_BUILD_MODE=client yarn build:client 2>&1 | grep -v "createEvent" || true

# Restore the wrapper index.tsx
if [ -f "src/routes/index.tsx.disabled" ]; then
  mv src/routes/index.tsx src/routes/index.csr.tsx
  mv src/routes/index.tsx.disabled src/routes/index.tsx
fi

# Check if client build succeeded (ignore prerendering errors)
if [ ! -d ".vinxi/build/client/_build" ]; then
  echo "❌ Client build failed - .vinxi/build/client/_build not found"
  exit 1
fi

echo "✅ Client bundle built successfully"

# Create output directory (clean it first to remove stale files)
echo "📦 Cleaning and preparing output directory..."
rm -rf dist/client
mkdir -p dist/client

# Copy client assets
echo "📦 Copying client assets to dist/client/..."
cp -r .vinxi/build/client/_build/* dist/client/

# Copy Vite manifest (required for module resolution)
echo "📦 Copying Vite manifest..."
mkdir -p dist/client/.vite
cp .output/public/_build/.vite/manifest.json dist/client/.vite/manifest.json

# Create manifest loader JS file (external file to avoid CSP issues)
# Transform Vite manifest format to match what the client code expects
echo "📝 Generating manifest loader script..."
node <<'NODESCRIPT'
const fs = require('fs');
const viteManifest = JSON.parse(fs.readFileSync('dist/client/.vite/manifest.json', 'utf-8'));

// Transform Vite manifest to the format expected by the client code
// Client expects: { [key]: { output: string (path), assets: [] } }
const clientManifest = {};
for (const [key, entry] of Object.entries(viteManifest)) {
  clientManifest[key] = {
    output: `/${entry.file}`, // Direct path string (NOT an object)
    assets: [] // Empty assets array for CSR build
  };
}

// Write the transformed manifest as JS
const jsContent = `// Vite manifest for module resolution
// This file is automatically generated during the CSR build
window.manifest = ${JSON.stringify(clientManifest, null, 2)};
`;

fs.writeFileSync('dist/client/manifest.js', jsContent, 'utf-8');
console.log('✅ Manifest transformed and written to dist/client/manifest.js');
NODESCRIPT

# Create index.html with correct asset paths from manifest
echo "📝 Generating index.html..."
node <<'NODESCRIPT'
const fs = require('fs');
const viteManifest = JSON.parse(fs.readFileSync('dist/client/.vite/manifest.json', 'utf-8'));

// Find the client entry point and CSS file
const clientEntry = Object.entries(viteManifest).find(([key]) => key === 'virtual:$vinxi/handler/client');
const cssFile = Object.values(viteManifest).find(entry => entry.css && entry.css.length > 0);

const clientJs = clientEntry ? clientEntry[1].file : 'assets/client.js';
const clientCss = cssFile && cssFile.css ? cssFile.css[0] : 'assets/client.css';

const html = `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Agent Harbor</title>
    <meta name="description" content="Create and manage AI agent coding sessions" />
    <link rel="stylesheet" href="/${clientCss}" />
  </head>
  <body>
    <div id="app"></div>
    <!-- Load Vite manifest for module resolution (must load before main script) -->
    <script src="/manifest.js"></script>
    <script type="module" src="/${clientJs}"></script>
  </body>
</html>
`;

fs.writeFileSync('dist/client/index.html', html, 'utf-8');
console.log('✅ Generated index.html with correct asset paths');
NODESCRIPT

echo "✅ CSR build complete in dist/client/"
echo "   Files: $(find dist/client -type f | wc -l | tr -d ' ') files, $(du -sh dist/client | cut -f1) total"
