# Copyright 2025 Schelling Point Labs Inc
# SPDX-License-Identifier: AGPL-3.0-only

# CI Policy: Always use just targets in CI workflows
# This ensures developers can run the exact same commands locally that CI uses,
# maintaining consistency and making local development match CI behavior.
#
# To run CI commands locally:
#   just fmt-rust          # Check code formatting
#   just lint-rust         # Run clippy linting
#   just check             # Check compilation
#   just build-cgroup-tests # Build test binaries
#   just test-rust-verbose # Run tests with verbose output
#   just build-sbx-helper-release # Build release binary
#   just build-agentfs-rust-libs # Build AgentFS Rust libraries (macOS only)
#   just test-agent-harbor   # Build and validate macOS AgentHarbor app (macOS only)

name: CI

on:
  push:
    branches: [main, linux-sandbox]
  pull_request:
    branches: [main, linux-sandbox]

env:
  CHECK_MERMAID: ${{ vars.CHECK_MERMAID }}

jobs:
  lint:
    runs-on: [self-hosted, nixos, x86-64-v3]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install Nix
        uses: metacraft-labs/nixos-modules/.github/install-nix@main
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - name: Run Lint
        run: nix develop -c pre-commit run --all-files

  build-and-cache-devshell:
    runs-on: [self-hosted, nixos, x86-64-v3]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install Nix
        uses: metacraft-labs/nixos-modules/.github/install-nix@main
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - name: Build & activate the Nix Dev Shell
        run: nix build -L --json .#devShells.x86_64-linux.default

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check code formatting
        run: just fmt-rust

      - name: Check code with clippy
        run: just lint-rust

      - name: Check compilation
        run: just check

      - name: Build cgroup enforcement test binaries
        run: just build-cgroup-tests

      - name: Run tests
        run: just test-rust-verbose

      - name: Build sandbox helper binary
        run: just build-sbx-helper-release

  legacy-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'

      - name: Install dependencies
        run: |
          gem install bundler
          cd legacy/ruby && bundle install

      - name: Run legacy tests
        run: |
          just legacy-test

  webui:
    runs-on: [self-hosted, nixos, x86-64-v3]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install Nix
        uses: metacraft-labs/nixos-modules/.github/install-nix@main
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          cachix-cache: ${{ vars.CACHIX_CACHE }}
          trusted-public-keys: ${{ vars.TRUSTED_PUBLIC_KEYS }}
          substituters: ${{ vars.SUBSTITUTERS }}

      - name: Build & activate the Nix Dev Shell
        run: |
          nix print-dev-env --accept-flake-config --impure .#devShells.x86_64-linux.default > dev-env.sh || exit 1
          source dev-env.sh
          echo "PATH=$PATH" >> "$GITHUB_ENV"
          echo "NIX_PATH=$NIX_PATH" >> "$GITHUB_ENV"
          echo "NIX_PROFILES=$NIX_PROFILES" >> "$GITHUB_ENV"
          echo "NIX_REMOTE=$NIX_REMOTE" >> "$GITHUB_ENV"

      - name: Install JS deps
        run: yarn install

      - name: Install dependencies
        run: just webui-install

      - name: Lint WebUI code
        run: just webui-lint

      - name: Type check WebUI code
        run: just webui-type-check

      - name: Build WebUI app
        run: just webui-build

      - name: Build mock server
        run: just webui-build-mock

      # - name: Install Playwright browsers
      #   run: just webui-install-browsers

      # TODO: Once tests are stable bring them back
      # - name: Run Playwright tests
      #   run: just webui-test
      #   env:
      #     BASE_URL: http://localhost:3000

  macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check code formatting
        run: just fmt-rust

      - name: Check code with clippy
        run: just lint-rust

      - name: Check compilation
        run: just check

      - name: Build AgentFS Rust libraries
        run: just build-agentfs-rust-libs

      - name: Build and validate AgentHarbor macOS app
        run: just test-agent-harbor
