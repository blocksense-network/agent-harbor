# Critical Architecture Notes

## VCS Abstraction
- VCSRepo helper abstracts Git, Mercurial, Bazaar and Fossil commands
- When writing task files, use binary mode to avoid CRLF conversion on Windows

## Test Architecture Requirements
- Parent directory tests require repos to be on agent task branches (not main)
- AgentTasks.new() constructor only recognizes repos on agent task branches
- Tests must call `VCSRepo.new(repo).checkout_branch('feat')` after `run_agent_task()` calls

## Token Usage
- Authentication for GitHub, GitLab and BitBucket is handled via `~/.netrc` which
  is configured during `codex-setup` if the respective `*_TOKEN` environment
  variables are present. The token is no longer injected in remote URLs.

## EXTRAS Framework
- Ruby-based component installation system via `bin/install-extras`
- Set EXTRAS="nix,direnv,cachix" with flexible delimiter parsing
- Uses Rake tasks in Rakefile.extras for dependency resolution

## TODOs — CLI Repo Commands Spec (WIP)

## TODOs — Config Schema
- Add CI validation of example TOML configs against `specs/schemas/config.schema.json`.
- Consider an `aw config validate` command and `aw schema print config` for tooling.
- Track enum reuse centrally in `$defs`; extend with delivery modes, runtimes, auth sources as they are added to the CLI spec.
- Clarify final command names: typos in draft use "insturctions"; spec adopts `aw repo instructions create` and `aw repo instructions link`. Consider alias `aw repo create-agent-instruction-symlinks` for backwards compatibility with docs.
- Define exact editor discovery order and env/config keys reused by `aw repo init` when prompting for project description.
- Specify JSON schemas for `repo init`, `instructions create`, `instructions link`, `repo check`, and `health` in a central place (currently summarized inline in cli-spec.md).
- Enumerate supported agent sets and mapping to link targets (align with the reference Ruby example). Ensure Windows notes (Git Bash/WSL symlinks) are captured in docs.
- Devcontainer health check: reference the procedure in `specs/devcontainer-setup.md` and `specs/devcontainer-design.md`; formalize a single entrypoint the CLI will call.
- Config layering: ensure `supported-agents` can be set in system/user/project scopes and overridden by CLI; document keys and env vars.
- Decide on fallback when multiple instruction sources exist and no `source-file` is provided (current behavior: error; alternative: prompt interactively).

## State Persistence Notes (2025-08-27)
- Local state uses a canonical SQLite DB; there is no local daemon. See docs/state-persistence.md for selection rules and SQL schema.

## Config Mapping Notes
- CLI flags are kebab-case (e.g., `--task-runner`, `--browser-automation`, `--browser-profile`, `--chatgpt-username`).
- TOML preserves dashes in keys and matches CLI names unless it’s a subcommand section (e.g., `repo.task-runner`, `network-api-url` → now `service-base-url`, `browser-automation`, `browser-profile`, `chatgpt-username`).
- ENV/JSON replace dashes with underscores: `AGENTS_WORKFLOW_REPO_TASK_RUNNER`, `AGENTS_WORKFLOW_BROWSER_AUTOMATION`, etc. See specs/Public/Configuration.md.

## 2025-08-28 — Spec TODOs addressed
- Replaced `ui.default` with a single `ui` key (schema + docs). Bare `aw` reads `ui` to pick TUI/WebUI (default: `tui`).
- Fixed CLI↔config↔ENV mapping to kebab-case ↔ lowerCamelCase ↔ UPPER_SNAKE.
- Clarified snapshot selection semantics in CLI spec: strategy is chosen by the executing host; leader-only snapshots in fleets.
- Expanded `sandbox-profiles` with motivations, predefined types, and OS guidance.
- WebUI tech note now picks React + Vite + TypeScript as the non-binding default.
