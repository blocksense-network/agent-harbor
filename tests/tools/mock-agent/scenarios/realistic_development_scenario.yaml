# Copyright 2025 Schelling Point Labs Inc
# SPDX-License-Identifier: AGPL-3.0-only

name: realistic_development_scenario
repo:
  init: true
  files:
    - path: "README.md"
      contents: |
        # Calculator App

        A simple calculator application.
    - path: "calculator.py"
      contents: |
        def add(a, b):
            return a + b

        def subtract(a, b):
            return a - b

        def multiply(a, b):
            return a * b

        def divide(a, b):
            return a / b

        if __name__ == "__main__":
            print("Calculator app")
timeline:
  # Agent starts working on the task
  - think:
      - [2000, "User wants me to add division by zero handling to the calculator. Let me examine the current code first."]
      - [1500, "Looking at the calculator.py file to understand the current implementation."]

  # Agent reads the current code
  - agentToolUse:
      toolName: "readFile"
      args:
        path: "calculator.py"
      result: "File read successfully"
      status: "ok"

  # Agent analyzes the code
  - think:
      - [2500, "I can see the calculator has basic arithmetic operations but the divide function doesn't handle division by zero. I need to add proper error handling."]
      - [1200, "I'll modify the divide function to raise a ValueError when dividing by zero."]

  # Agent implements the fix
  - agentToolUse:
      toolName: "runCmd"
      args:
        command: "cd /workspace && python -c \"import calculator; print('Testing current divide function...'); calculator.divide(10, 2); print('10/2 =', calculator.divide(10, 2))\""
        cwd: "."
      result: "10/2 = 5.0"
      status: "ok"

  # Agent hits a roadblock - realizes they need to test division by zero
  - think:
      - [3000, "Good, the basic functionality works. Now I need to test the division by zero case and add proper error handling. Let me first try dividing by zero to see what happens."]
      - [1500, "Actually, let me think about this more carefully. The user wants me to add division by zero handling. I should first test what happens when we try to divide by zero with the current code."]

  # Agent tests division by zero and encounters the error
  - agentToolUse:
      toolName: "runCmd"
      args:
        command: "cd /workspace && python -c \"import calculator; calculator.divide(10, 0)\" 2>&1 || echo 'Division by zero caused an error'"
        cwd: "."
      result: "Traceback (most recent call last): ZeroDivisionError: division by zero"
      status: "ok"

  # Agent realizes the issue and asks user for guidance
  - assistant:
      - [2000, "I see that dividing by zero causes a ZeroDivisionError. I need to add proper error handling to the divide function."]
      - [2500, "What approach would you like me to take for handling division by zero? Should I raise a custom ValueError, return None, or handle it differently?"]

  # User provides helpful tip (simulated as userInputs)
  - userInputs:
      - [1000, "Please raise a ValueError with a clear message when dividing by zero."]
    target: "tui"

  # Agent acknowledges the user's input
  - think:
      - [1800, "The user wants me to raise a ValueError with a clear message for division by zero. That's a good approach."]
      - [800, "Now I'll implement the fix by modifying the divide function to check for division by zero before performing the division."]

  # Agent implements the fix
  - agentToolUse:
      toolName: "runCmd"
      args:
        command: |
          cd /workspace && python -c "
          # First, let's modify the divide function to handle division by zero
          import re
          
          with open('calculator.py', 'r') as f:
              content = f.read()
          
          # Replace the divide function
          new_divide = '''def divide(a, b):
              if b == 0:
                  raise ValueError(\"Cannot divide by zero\")
              return a / b'''
          
          # Use regex to replace the function
          pattern = r'def divide\(a, b\):\s*return a / b'
          content = re.sub(pattern, new_divide, content, flags=re.MULTILINE | re.DOTALL)
          
          with open('calculator.py', 'w') as f:
              f.write(content)
          
          print('Modified divide function to handle division by zero')
          "
        cwd: "."
      result: "Modified divide function to handle division by zero"
      status: "ok"

  # Agent tests the fix
  - agentToolUse:
      toolName: "runCmd"
      args:
        command: "cd /workspace && python -c \"import calculator; print('Testing normal division:'); print('10/2 =', calculator.divide(10, 2)); print('Testing division by zero:'); calculator.divide(10, 0)\" 2>&1 || echo 'Error caught successfully'"
        cwd: "."
      result: "Testing normal division: 10/2 = 5.0 Testing division by zero: Traceback (most recent call last): ValueError: Cannot divide by zero"
      status: "ok"

  # Agent reads the updated file to verify the changes
  - agentToolUse:
      toolName: "readFile"
      args:
        path: "calculator.py"
      result: "File read successfully"
      status: "ok"

  # Agent runs comprehensive tests
  - agentToolUse:
      toolName: "runCmd"
      args:
        command: |
          cd /workspace && python -c "
          import calculator
          
          # Test all functions
          print('Testing all calculator functions...')
          print('add(5, 3) =', calculator.add(5, 3))
          print('subtract(10, 4) =', calculator.subtract(10, 4))
          print('multiply(6, 7) =', calculator.multiply(6, 7))
          print('divide(15, 3) =', calculator.divide(15, 3))
          
          # Test edge cases
          print('divide(10, 2) =', calculator.divide(10, 2))
          
          # Test error case
          try:
              calculator.divide(10, 0)
          except ValueError as e:
              print('Error handling works:', str(e))
          
          print('All tests passed!')
          "
        cwd: "."
      result: "Testing all calculator functions... add(5, 3) = 8 subtract(10, 4) = 6 multiply(6, 7) = 42 divide(15, 3) = 5.0 divide(10, 2) = 5.0 Error handling works: Cannot divide by zero All tests passed!"
      status: "ok"

  # Agent creates a proper test file
  - agentToolUse:
      toolName: "writeFile"
      args:
        path: "test_calculator.py"
        text: |
          import calculator

          def test_add():
              assert calculator.add(2, 3) == 5
              assert calculator.add(-1, 1) == 0

          def test_subtract():
              assert calculator.subtract(5, 3) == 2
              assert calculator.subtract(10, 15) == -5

          def test_multiply():
              assert calculator.multiply(4, 5) == 20
              assert calculator.multiply(-2, 3) == -6

          def test_divide():
              assert calculator.divide(10, 2) == 5.0
              assert calculator.divide(15, 3) == 5.0

          def test_divide_by_zero():
              try:
                  calculator.divide(10, 0)
                  assert False, "Should have raised ValueError"
              except ValueError as e:
                  assert str(e) == "Cannot divide by zero"

          if __name__ == "__main__":
              test_add()
              test_subtract()
              test_multiply()
              test_divide()
              test_divide_by_zero()
              print("All tests passed!")
      result: "Test file created"
      status: "ok"

  # Agent runs the test suite
  - agentToolUse:
      toolName: "runCmd"
      args:
        command: "cd /workspace && python test_calculator.py"
        cwd: "."
      result: "All tests passed!"
      status: "ok"

  # Agent announces task completion
  - assistant:
      - [2000, "Perfect! I've successfully added division by zero handling to the calculator application."]
      - [1500, "The divide function now raises a clear ValueError when attempting to divide by zero."]
      - [1200, "I've also created comprehensive tests to verify all functionality works correctly."]
      - [800, "The task is now complete with proper error handling and full test coverage."]

expect:
  exitCode: 0
  artifacts:
    - type: "taskFile"
      pattern: "calculator.py"
    - type: "taskFile"
      pattern: "test_calculator.py"
